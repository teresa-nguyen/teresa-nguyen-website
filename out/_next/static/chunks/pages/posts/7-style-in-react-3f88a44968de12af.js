(self.webpackChunk_N_E=self.webpackChunk_N_E||[]).push([[816],{1348:function(e,t,n){(window.__NEXT_P=window.__NEXT_P||[]).push(["/posts/7-style-in-react",function(){return n(2139)}])},250:function(e,t,n){"use strict";var s=n(5893),a=n(5988),r=n.n(a);(new Date).getFullYear();t.Z={footer:(0,s.jsx)("footer",{className:"jsx-2447ca1c11803f07",children:(0,s.jsx)(r(),{id:"2447ca1c11803f07",children:"footer.jsx-2447ca1c11803f07{margin-top:8rem}a.jsx-2447ca1c11803f07{float:right}"})})}},2139:function(e,t,n){"use strict";n.r(t),n.d(t,{default:function(){return p}});var s=n(5893),a=n(8941),r=n.n(a),o=n(3805),i=n(250),c=n(3905);function l(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function d(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},s=Object.keys(n);"function"===typeof Object.getOwnPropertySymbols&&(s=s.concat(Object.getOwnPropertySymbols(n).filter((function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable})))),s.forEach((function(t){l(e,t,n[t])}))}return e}function h(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t=function(){var t=Object.assign({h1:"h1",p:"p",code:"code",pre:"pre"},(0,c.useMDXComponents)(),e.components);return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(t.h1,{children:"How to Style in React"}),"\n",(0,s.jsxs)(t.p,{children:["When I first learned how to style in HTML, I used the ",(0,s.jsx)(t.code,{children:"class"})," and ",(0,s.jsx)(t.code,{children:"style"})," properties. In ",(0,s.jsx)(t.code,{children:"React"}),", we use the same properties, but they are slightly different."]}),"\n",(0,s.jsxs)(t.p,{children:["In React, we use the ",(0,s.jsx)(t.code,{children:"className"})," property instead of the ",(0,s.jsx)(t.code,{children:"class"})," property. This is done because ",(0,s.jsx)(t.code,{children:"class"})," means something else in JavaScript, a blueprint for creating objects. Besides the name, they both behave the same. ",(0,s.jsx)(t.code,{children:"className"})," takes in a string of CSS class names."]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",children:'\x3c!-- html --\x3e\n<div class="myClass"></div>\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jxs",children:'// jsx\n<Component className="myClass"></Component>\n'})}),"\n",(0,s.jsxs)(t.p,{children:["The other property is ",(0,s.jsx)(t.code,{children:"style"}),". In React, it is also called ",(0,s.jsx)(t.code,{children:"style"}),", but it behaves a little differently. Instead of taking a string seperated by a ",(0,s.jsx)(t.code,{children:";"}),", it takes in an object instead, with the style name as the key and the value as strings or numbers. The key in the style object is also camelCase, so remember to convert the style name!"]}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-html",children:'\x3c!-- html --\x3e\n<div style="padding-left: 12px; position: absolute"></div>\n'})}),"\n",(0,s.jsx)(t.pre,{children:(0,s.jsx)(t.code,{className:"language-jsx",children:"// jsx\n<Component style={{ paddingLeft: 12, position: 'absolute' }}></Component>\n"})}),"\n",(0,s.jsxs)(t.p,{children:["Because ",(0,s.jsx)(t.code,{children:"React"})," uses ",(0,s.jsx)(t.code,{children:"jsx"}),", we must understand these differences when working in ",(0,s.jsx)(t.code,{children:"jsx"})," vs ",(0,s.jsx)(t.code,{children:"html"}),"."]})]})},n=Object.assign({},(0,c.useMDXComponents)(),e.components),a=n.wrapper;return a?(0,s.jsx)(a,d({},e,{children:(0,s.jsx)(t,{})})):t()}var u=(0,s.jsx)(h,{});function p(e){return(0,o.withSSG)(r()({filename:"7-style-in-react.md",route:"/posts/7-style-in-react",meta:{title:"How to Style in React",date:"2022/5/14",description:"Understanding the className and style properties in React.",tag:"css,react",author:"Teresa"},pageMap:[{name:"index",route:"/",frontMatter:{type:"page",title:"About",date:"2022-04-02T00:00:00.000Z"}},{name:"posts",children:[{name:"1-controlled-input",route:"/posts/1-controlled-input",frontMatter:{title:"Learning About Controlled Inputs in React",date:"2022/4/02",description:"Understanding controlled inputs and why we should use them.",tag:"react",author:"Teresa"}},{name:"2-each",route:"/posts/2-each",frontMatter:{title:"All the Different Ways to Go Through a List in JavaScript",date:"2022/4/09",description:"Understanding all the different ways to go through a list in JavaScript.",tag:"javascript",author:"Teresa"}},{name:"3-copying-object",route:"/posts/3-copying-object",frontMatter:{title:"How to Copy an Object in JavaScript",date:"2022/4/16",description:"Learn the different ways to copy an object in JavaScript.",tag:"javascript",author:"Teresa"}},{name:"4-understanding-equality-in-js",route:"/posts/4-understanding-equality-in-js",frontMatter:{title:"Understanding Equality in JavaScript",date:"2022/4/23",description:"Learn the difference between '==' and '===' in JavaScript.",tag:"javascript",author:"Teresa"}},{name:"5-understanding-box-model",route:"/posts/5-understanding-box-model",frontMatter:{title:"Understanding the Box Model",date:"2022/4/30",description:"Learn about Padding, Border, and Margin in the CSS box model.",tag:"css",author:"Teresa"}},{name:"6-flexbox",route:"/posts/6-flexbox",frontMatter:{title:"Helpful Resources for Flexbox",date:"2022/5/07",description:"Some valuable resources for understanding Flexbox.",tag:"css",author:"Teresa"}},{name:"7-style-in-react",route:"/posts/7-style-in-react",frontMatter:{title:"How to Style in React",date:"2022/5/14",description:"Understanding the className and style properties in React.",tag:"css,react",author:"Teresa"}},{name:"index",route:"/posts",frontMatter:{type:"posts",title:"Blog",date:"2022-04-02T00:00:00.000Z"}}],route:"/posts"},{name:"tags",children:[{name:"[tag]",route:"/tags/[tag]",frontMatter:{type:"tag",title:"Tagged Posts"}}],route:"/tags"}]},i.Z))(d({},e,{children:u}))}}},function(e){e.O(0,[774,686,888,179],(function(){return t=1348,e(e.s=t);var t}));var t=e.O();_N_E=t}]);